#!/bin/bash
DATE=$(date +%Y%m%d)
BASEDIR=~/Sync
UNAME=$(uname -m)
FORCE=""
INSTALL_CHROME=""
if [ "$1" = "force" ]; then
	FORCE="$1"
fi

if ! command -v sudo &>/dev/null; then
	echo Installing sudo
	su root -c "apt install sudo"
	su root -c "sed --in-place -e 's/^\(sudo.*\):\(.*\)$/\1:$USER,\2/g' /etc/group"
	echo Sudo installed - you may need to relogin
	exit
fi

# Ensure base packages installed
echo Ensuring base packages installed
PKGS=""
for P in tmux neovim git zsh htop curl ripgrep openssh-server build-essential fuse3 luarocks rsync aptitude kitty-terminfo foot-terminfo fd-find grc chafa libfuse2 libfuse2t64; do
	if ! dpkg-query -s $P 2>/dev/null | grep -q ' install ok'; then
		PKGS+="$P "
	fi
done

if command -v Xwayland >/dev/null; then
	for P in wtype sway foot swaylock grimshot grim slurp swayidle waybar wdisplays wl-mirror wlr-randr xdg-desktop-portal-wlr clipman sway-notification-center wofi; do
		if ! dpkg-query -s "$P" 2>/dev/null | grep -q 'install ok'; then
			PKGS+="$P "
		fi
	done
	INSTALL_CHROME="Y"
fi

if [ "$PKGS" ]; then
	echo Installing "$PKGS"
  # Filtering out non-installable packages
  PKGS="$(echo "$PKGS" | tr ' ' '\n' | sort )"
  AVAIL="$(apt-cache --generate pkgnames \
    | grep --line-regexp --fixed-strings \
    -e $(echo $PKGS | sed -e 's/ / -e /g') | sort )"
  echo Unable to install $(diff <(echo "$PKGS") <(echo "$AVAIL") | grep "^<" | sed -e 's/< //g')
	echo Actually Installing "$AVAIL"
  if [ "$PKGS" ]; then
    sudo apt -y install $(echo "$AVAIL" | tr '\n' ' ')
  fi
fi

if command -v Xorg >/dev/null; then
	for P in yad xsettingsd udiskie dex xautolock i3 i3blocks kitty rofi suckless-tools x11-xserver-utils x11vnc gnome-keyring; do
		if ! dpkg-query -s "$P" 2>/dev/null | grep -q 'install ok'; then
			PKGS+="$P "
		fi
	done
	INSTALL_CHROME="Y"
fi

if [ "$INSTALL_CHROME" = "Y" ]; then
	if ! dpkg-query -s google-chrome-stable 2>/dev/null | grep -q 'install ok'; then
		echo Installing chrome
		wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
		sudo dpkg -i ./google-chrome-stable_current_amd64.deb
		rm ./google-chrome-stable_current_amd64.deb
		sudo apt-get -f install
	fi
fi

echo Ensuring Sync directory exists
if [ ! -d $BASEDIR ]; then
	mkdir -p $BASEDIR
fi

if [ "$FORCE" ] || [ ! -d $BASEDIR/Config ]; then
	if ping -c1 -W1 -q jimbob >/dev/null 2>&1; then
		rsync -arvz --delete-after cjd@jimbob:/home/cjd/Sync/Config/ $BASEDIR/Config
	else
		rsync -arvz --delete-after -e 'ssh -p 2222' cjd@home.adebenham.com:/home/cjd/Sync/Config/ $BASEDIR/Config
	fi
fi

if [ "$FORCE" ] || [ ! -d $BASEDIR/bin ]; then
	if ping -c1 -W1 -q jimbob >/dev/null 2>&1; then
		rsync -arvz --delete-after cjd@jimbob:/home/cjd/Sync/bin/ $BASEDIR/bin
	else
		rsync -arvz --delete-after -e 'ssh -p 2222' cjd@home.adebenham.com:/home/cjd/Sync/bin/ $BASEDIR/bin
	fi
	chmod -R +x $BASEDIR/bin/*
fi

echo Setting up Config files
cd $BASEDIR/Config/dothome || exit
for L in .[^.]*; do
	if [ ! -L ~/"$L" ]; then
		echo creating ~/"$L"
		mv ~/"$L" "$HOME/$L-$DATE" 2>/dev/null
		ln -s $BASEDIR/Config/dothome/"$L" ~/
	fi
done
cd $BASEDIR/Config/dotconfig || exit
mkdir -p ~/.config
for C in *; do
	if [ ! -L ~/.config/"$C" ]; then
		echo creating ~/.config/"$C"
		mv ~/.config/"$C" ~/.config/"$C"-"$DATE" 2>/dev/null
		ln -s $BASEDIR/Config/dotconfig/"$C" ~/.config/
	fi
done
cd $BASEDIR/Config/dotlocalshare || exit
mkdir -p ~/.local/share
for C in *; do
	if [ ! -L ~/.local/share/"$C" ]; then
		echo creating ~/.local/share/"$C"
		mv ~/.local/share/"$C" ~/.local/share/"$C"-"$DATE" 2>/dev/null
		ln -s $BASEDIR/Config/dotlocalshare/"$C" ~/.local/share/
	fi
done

echo Cleaning old links
find ~ -maxdepth 1 -xtype l -exec rm "{}" \;
find ~/.config -maxdepth 1 -xtype l -exec rm "{}" \;
find ~/.local/share -maxdepth 1 -xtype l -exec rm "{}" \;

echo Updating alternatives
for L in ex vi view vim vimdiff; do
	if [[ ! "$(readlink -f /etc/alternatives/$L)" == *"Sync"* ]]; then
		echo Update Alternatives
		sudo update-alternatives --install /usr/bin/$L $L "$HOME/Sync/bin/$UNAME/nvim" 110
		sudo update-alternatives --set $L "$HOME/Sync/bin/$UNAME/nvim"
	fi
done

# Clean links
rm ~/.*-"${DATE}" ~/.config/*-"${DATE}" ~/.local/share/*-"${DATE}" 2>/dev/null

echo Setting shell
if [ "$(getent passwd "$USER" | cut -d: -f7)" != "/usr/bin/zsh" ]; then
	echo Set zsh as shell
	sudo usermod -s /usr/bin/zsh "$(whoami)"
fi

echo Setting up syncthing
# Setup Syncthing
if [ ! -d ~/.syncthing ]; then
	mkdir ~/.syncthing
	cd ~/.syncthing || exit
	if [ "$UNAME" = "x86_64" ]; then
		ARCH="amd64"
	else
		ARCH="arm"
	fi
	URL=$(curl -s https://api.github.com/repos/syncthing/syncthing/releases/latest | grep "browser_download_url.*gz" | grep linux-$ARCH- | sed -e 's/^.*\(http.*gz\).*$/\1/g')
	curl -L --output - "$URL" | tar -xvz --strip-components=1 -f -
	mkdir -p ~/.config/systemd/user/
	sed -e "s|usr\/bin|$(pwd)|g" ./etc/linux-systemd/user/syncthing.service >~/.config/systemd/user/syncthing.service
	systemctl --user enable syncthing.service
	systemctl --user start syncthing.service
	sleep 5
	~/.syncthing/syncthing --device-id
fi

function ensure_line() {
	FILE="$1"
	LINE="$2"
	if ! grep -q "^$LINE" "$FILE"; then
		echo Adding "$LINE" to "$FILE"
		# shellcheck disable=2001
		LN=$(echo "$LINE" | sed -e 's/[ =].*$//g')
		(
			grep -v "$LN" "$FILE"
			echo "$LINE"
		) >/tmp/$$.out
		# shellcheck disable=2024
		sudo tee "$FILE" </tmp/$$.out >/dev/null
		rm /tmp/$$.out
	fi
}
if [ "$USER" != "debenham" ]; then
	for SYSCTL in "kernel.dmesg_restrict=0" "net.ipv4.conf.all.src_valid_mark=1" "fs.inotify.max_user_watches=10485760"; do
		ensure_line "/etc/sysctl.conf" "$SYSCTL"
	done

	ensure_line /etc/ssh/sshd_config "PermitRootLogin without-password"
	for HST in "192.168.0.2  jimbob" "192.168.0.3  switch" "192.168.0.4  elite" "192.168.0.5  lenny" "192.168.0.9  piserve" "10.8.0.5  tinkerboard" "10.8.0.6  website"; do
		ensure_line "/etc/hosts" "$HST"
	done

	for GRP in video libvirt audio bluetooth sudo; do
		if grep -q "$GRP" /etc/group; then
			if ! grep -q "$GRP.*$USER" /etc/group; then
				echo Adding "$USER" to $GRP
				sudo sed --in-place -e "s/^\($GRP.*\):\(.*\)$/\1:$USER,\2/g" /etc/group
			fi
		fi
	done
fi

if [ -e /etc/wireguard ]; then
  sudo chmod a+rX /etc/wireguard
  if [ -e /etc/wireguard/wg0.conf ]; then
    echo Setting up wireguard
    cd $BASEDIR/Config/systemd || exit
    for L in *wire*; do
      if [ ! -L /etc/systemd/system/"$L" ]; then
        echo creating /etc/systemd/system/"$L"
        sudo mv /etc/systemd/system/"$L" "/etc/systemd/system/$L-$DATE" 2>/dev/null
        sudo ln -s $BASEDIR/Config/systemd/"$L" /etc/systemd/system/
      fi
    done
    sudo systemctl daemon-reload
    sudo systemctl enable wireguard_reresolve-dns.timer
    sudo systemctl start wireguard_reresolve-dns.timer
  fi
fi

echo Done
